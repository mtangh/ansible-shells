# ansible-test-run
ansible-test-run() {
  local ansible_conf=""
  local casenamelist=""
  local testcasename=""
  local define_cases=""
  local def_casename=""
  local play_playdir="${ANSIBLE_TEST_RUN_PLAYDIR:-}"
  local play_testyml="${ANSIBLE_TEST_RUN_TESTYML:-test.yml}"
  local play_options="${ANSIBLE_TEST_RUN_OPTIONS:--D}"
  local options_opts=""
  local optionsatend=0
  local case_options=""
  local inventory_fn="inventory"
  local listingcases=0
  local syntax_check=0
  local cleanup_only=0
  local cleanup_tags=1
  local quietrunning=0
  local test_rootdir="${play_playdir:-.}"
  local test_r_owner=$(id -un 2>/dev/null)
  local test_r_group=$(id -gn 2>/dev/null)
  local test_prefdir=""
  local c_extra_vars=""
  local tmpextravars=""
  local tmp_optsfile=""
  local tmp_test_dir=""

  local ANSIBLE_CONFIG=""

  local errors=0
  local exitst=0

  local SED=""
  [ -z "$SED" ] && SED=$(type -p gsed 2>/dev/null)
  [ -z "$SED" ] && SED=$(type -p sed 2>/dev/null)

  [ -n "$play_playdir" ] &&
  [ -e "$play_playdir/$play_testyml" ] && {
    play_testyml="$play_playdir/$play_testyml"
    inventory_fn="$play_playdir/$inventory_fn"
  }
  [ -z "$play_playdir" ] &&
  for tmp_test_dir in ./ ./tests ../tests
  do
    [ -e "$tmp_test_dir/$play_testyml" ] ||
      continue
    play_playdir=$(cd "$tmp_test_dir" 1>/dev/null 2>&1; pwd)
    play_testyml="$play_playdir/$play_testyml"
    inventory_fn="$play_playdir/$inventory_fn"
    break
  done 2>/dev/null

  for ansible_conf in \
    ./ansible.cfg \
    "$play_playdir/ansible.cfg" \
    "$HOME/.ansible-tools.d/ansible.cfg" \
    "$HOME/.ansible.cfg" \
    "$CDIR/ansible.cfg"
  do
    [ -e "$ansible_conf" ] ||
      continue
    ANSIBLE_CONFIG="${ansible_conf}"
    export ANSIBLE_CONFIG
    break
  done 2>/dev/null

  [ -e "$play_testyml" ] || {
    echo "$FUNCNAME: '$play_testyml' no such file." 1>&2
    return 127
  }

  [ -e "$inventory_fn" ] || {
    echo "localhost" 1>$inventory_fn
  } 2>/dev/null

  c_extra_vars=""
  c_extra_vars="${c_extra_vars:+$c_extra_vars }-e test_run=yes"
  c_extra_vars="${c_extra_vars:+$c_extra_vars }-e test_owner=${test_r_owner}"
  c_extra_vars="${c_extra_vars:+$c_extra_vars }-e test_group=${test_r_group}"
  c_extra_vars="${c_extra_vars:+$c_extra_vars }-e test_root_dir=${test_rootdir}"
  [ -d "${test_roordir}/test-setup" ] &&
  c_extra_vars="${c_extra_vars:+$c_extra_vars }-e test_setup_dir=${test_roordir}/test-setup"
  [ -d "${test_roordir}/test-teardown" ] &&
  c_extra_vars="${c_extra_vars:+$c_extra_vars }-e test_teardown_dir=${test_roordir}/test-teardown"

  options_opts="${options_opts:+$options_opts }|list=listingcases"
  options_opts="${options_opts:+$options_opts }|syntax-check=syntax_check"
  options_opts="${options_opts:+$options_opts }q|quiet=quietrunning"
  options_opts="${options_opts:+$options_opts }|play-args:=play_options"
  options_opts="${options_opts:+$options_opts }|reset=cleanup_only"
  options_opts="${options_opts:+$options_opts }|no-clean=cleanup_tags"

  eval $(getoptions "$options_opts" "$@")

  while getoptions_has_next
  do
    eval $(getoptions_shift)
    case "$_getopt_V" in
    --)
      optionsatend=1
      ;;
    -C|--dry-run)
      play_options="${play_options:+$play_options }-C"
      ;;
    -h|--help)
      echo "Usage: $FUNCNAME [OPTIONS] [test-case-name ...]" 1>&2
      return 1
      ;;
    -*)
      play_options="${play_options:+$play_options }${_getopt_V}"
      ;;
    *)
      [ $optionsatend -eq 0 ] &&
      casenamelist="${casenamelist:+$casenamelist }${_getopt_V}"
      [ $optionsatend -eq 0 ] ||
      play_options="${play_options:+$play_options }${_getopt_V}"
      ;;
    esac
  done

  [ $cleanup_only -ne 0 -a -d "${test_rootdir}" ] && {
    rm -vrf "${test_rootdir}"
    echo
    echo "clean."
    return 0
  }

  [ $syntax_check -ne 0 ] && {
    ansible-playbook -vvvv \
       -i "${inventory_fn}" "${play_testyml}" -M ./ --syntax-check
    return $?
  }

  define_cases=$(
    : && {
      ansible-playbook -i "${inventory_fn}" "${play_testyml}" --list-tags |
      $SED -nre 's/^[ ]*play.*[ ]*TAGS:[ ]*\[([^ ]+)\].*$/\1/gp' |
      sort -u
    } 2>/dev/null )

  [ $listingcases -ne 0 ] && {
    for def_casename in $define_cases
    do
      echo "$def_casename"
    done
    return 0
  }

  [ -n "$casenamelist" ] || casenamelist="${define_cases}"
  [ -n "$casenamelist" ] || casenamelist="default"

  [ -d "${test_rootdir}" ] || {
    mkdir -p "${test_rootdir}" 1>/dev/null 2>&1
  }

  for testcasename in $casenamelist
  do

    : && {
      for def_casename in $define_cases
      do
        echo "$def_casename"
      done
    } 2>/dev/null |
    grep -E '^'"$testcasename"'$' 1>/dev/null 2>&1 || {
      printf " %-31s ......... " "$testcasename"
      echo 'NOT_FOUND.'
      continue
    }

    test_prefdir="${test_rootdir}/target/${testcasename}"

    [ $cleanup_tags -ne 0 ] &&
    [ -d "${test_prefdir}" ] && {
      rm -rf "${test_prefdir}" 1>/dev/null 2>&1
    }

    [ -d "${test_prefdir}" ] || {
      mkdir -p "${test_prefdir}" 1>/dev/null 2>&1
    }

    case_options="${play_options}"

    for tmp_optsfile in ${play_playdir}/{,opts/,play-options/}{all,$testcasename}.opts
    do
      [ -r "${tmp_optsfile}" ] &&
      case_options="${case_options:+$case_options }$(cat $tmp_optsfile)"
    done

    case_options=$(echo "$case_options"|$SED -re 's#^ *##g' 2>/dev/null)

    tmpextravars="${c_extra_vars}"
    tmpextravars="${tmpextravars:+$tmpextravars }-e test_casename=${testcasename}"
    tmpextravars="${tmpextravars:+$tmpextravars }-e test_prefix_dir=${test_prefdir}"

    printf " %-31s ......... " "$testcasename"

    : && {

    cat <<_LOG_
[$FUNCNAME]
------------------------------------------------------------------------
--  Test Case:
--    ${testcasename} in playbook:${play_testyml}
--  Play Options:
--    -vvvv
--    -i ${inventory_fn}
--    ${case_options}
--    ${tmpextravars}
------------------------------------------------------------------------

_LOG_

    ansible-playbook -vvvv \
      -i "${inventory_fn}" "${play_testyml}" \
      -t "$testcasename" $case_options $tmpextravars

    } 1>"${test_prefdir}.log" 2>&1

    exitst=$?

    if [ $exitst -eq 0 ] &&
       tail -n 3 "${test_prefdir}.log" |
       grep -E "unreachable=0\s+failed=0" 1>/dev/null 2>&1
    then
      echo "OK."
    else
      echo "NG."
      if [ $quietrunning -eq 0 ]
      then
        echo
        echo "{{{ ${testcasename}.log"
        echo
        cat "${test_prefdir}.log"
        echo
        echo "}}} ${testcasename}.log"
      fi
      errors=$(( errors+1 ))
    fi

  done

  if [ $errors -ne 0 ]
  then
    echo
    echo "@@@ ${errors} error(s)"
  fi

  return $errors
}
# vim: set ff=unix ts=2 sw=2 sts=2 et : This line is VIM modeline
